<div class="project" id="ransomdetection">
    <h2 style="font-weight: 700">Ransomware detection with inotify</h2>

    <p>Most ransomware variants encrypt volumes recursive and usually traverse a file system alphabetically. Knowing this, we can lay bait for ransomware, and then sound the alarm when notice something suspicious. When working on my <a class="projlink" href="#smbdfssetup">Samba DFS project</a>, I created world-writable hidden directories at the root of every share, and named them so they sat first in alphabetical order. In each directory were thousands of almost-empty plaintext files. Using <a class="projlink" href="https://github.com/rvoicilas/inotify-tools"><code>inotify-tools&#x1F5D7;</code></a> to interface with Linux's <code>inotify()</code> function, I set up an inode watch on every file of each hidden directory. When a threshold value of files are modified or deleted, the server fires off an email containing the connection information of the user(s) and IP(s) accessing those bait files.<br /><br />

    While the encryption program takes its time to encrypt all the thousands of files (usually a handful of minutes), we are afforded the opportunity to verify and then kill the malicious process ID. To take it a step further, we can even block the IP on every shares' firewall with a single Ansible command. The process is further automatable by killing the PID and setting the firewall rule at another, higher threshold. Using this approach, we've lowered our average frequency of ransomware events (defined as events requiring a file system restore) from 1-2 per month to zero.

    <div class="projdocs">
        <a href="https://github.com/a-abella/ransom-alarm.sh" target="_blank" class="projlink">ransom-alarm.sh - Monitoring for ransomware and other intrusion</a><br />
    </div>
</div>
